{"version":3,"sources":["components/SearchBar.js","components/ProductCategoryRow.js","components/ProductRow.js","components/ProductTable.js","components/FilterableProductTable.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","react_default","a","createElement","className","type","placeholder","onChange","filterByProductName","value","searchField","filterByStock","isFilteredByStock","ProductCategoryRow","_ref","productCategory","colSpan","ProductRow","product","productName","stocked","name","style","color","price","ProductTable","rows","lastCategory","products","forEach","category","push","components_ProductCategoryRow","key","components_ProductRow","class","FilterableProductTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","checked","state","_this$state","filteredProducts","filter","filteredByName","toLowerCase","includes","components_SearchBar","components_ProductTable","Component","PRODUCTS","App","components_FilterableProductTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NA+BeA,EA7BG,SAAAC,GAChB,OACEC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLC,YAAY,oBACZC,SAAUP,EAAMQ,oBAChBC,MAAOT,EAAMU,cAEfT,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,WACLE,SAAUP,EAAMW,cAChBF,MAAOT,EAAMY,oBAJjB,qCCLCC,EARY,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,gBAC5B,OACEd,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIa,QAAQ,KAAKD,KCaRE,EAhBI,SAAAjB,GACjB,IAAMkB,EAAUlB,EAAMkB,QAChBC,EAAcD,EAAQE,QAC1BF,EAAQG,KAERpB,EAAAC,EAAAC,cAAA,QAAMmB,MAAO,CAAEC,MAAO,QAAUL,EAAQG,KAAxC,KAGF,OACEpB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKgB,GACLlB,EAAAC,EAAAC,cAAA,UAAKe,EAAQM,SCqBJC,EA9BM,SAAAzB,GACnB,IAAM0B,EAAO,GACTC,EAAe,KAenB,OAbA3B,EAAM4B,SAASC,QAAQ,SAAAX,GACjBA,EAAQY,WAAaH,GACvBD,EAAKK,KACH9B,EAAAC,EAAAC,cAAC6B,EAAD,CACEC,IAAKf,EAAQY,SACbf,gBAAiBG,EAAQY,YAI/BJ,EAAKK,KAAK9B,EAAAC,EAAAC,cAAC+B,EAAD,CAAYD,IAAKf,EAAQG,KAAMH,QAASA,KAClDS,EAAeT,EAAQY,WAIvB7B,EAAAC,EAAAC,cAAA,SAAOgC,MAAM,aACXlC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,aAAQuB,KCsBCU,cA9Cb,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxC,KAORQ,oBAAsB,SAAAoC,GACpBP,EAAKQ,SAAS,CACZnC,YAAakC,EAAME,OAAOrC,SAVX4B,EAcnB1B,cAAgB,SAAAiC,GACdP,EAAKQ,SAAS,CACZjC,kBAAmBgC,EAAME,OAAOC,WAdlCV,EAAKW,MAAQ,CACXtC,YAAa,GACbE,mBAAmB,GAJJyB,wEAoBV,IAAAY,EACoCT,KAAKQ,MAAxCtC,EADDuC,EACCvC,YAAaE,EADdqC,EACcrC,kBACfsC,EAAmBV,KAAKxC,MAAM4B,SAASuB,OAAO,SAAAjC,GAClD,IAAMkC,EAAiBlC,EAAQG,KAC5BgC,cACAC,SAAS5C,EAAY2C,eACxB,OAAOzC,EACHM,EAAQE,SAAWgC,EACnBA,IAGN,OACEnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoD,EAAD,CACE7C,YAAa8B,KAAKQ,MAAMtC,YACxBE,kBAAmB4B,KAAKQ,MAAMpC,kBAC9BD,cAAe6B,KAAK7B,cACpBH,oBAAqBgC,KAAKhC,sBAE5BP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAc5B,SAAUsB,YAzCKO,aCGrC,IAAMC,EAAW,CACf,CACE5B,SAAU,iBACVN,MAAO,SACPJ,SAAS,EACTC,KAAM,YAER,CACES,SAAU,iBACVN,MAAO,QACPJ,SAAS,EACTC,KAAM,YAER,CACES,SAAU,iBACVN,MAAO,SACPJ,SAAS,EACTC,KAAM,cAER,CACES,SAAU,cACVN,MAAO,SACPJ,SAAS,EACTC,KAAM,cAER,CACES,SAAU,cACVN,MAAO,UACPJ,SAAS,EACTC,KAAM,YAER,CACES,SAAU,cACVN,MAAO,UACPJ,SAAS,EACTC,KAAM,YAGKsC,EAzCf,WACE,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,CAAwBhC,SAAU8B,KCOvBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ab8bd9b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBar = props => {\n  return (\n    <table className=\"blueTable\">\n      <thead>\n        <tr>\n          <td>\n            <form>\n              <input\n                type=\"search\"\n                placeholder=\"Search product...\"\n                onChange={props.filterByProductName}\n                value={props.searchField}\n              />\n              <p>\n                <input\n                  type=\"checkbox\"\n                  onChange={props.filterByStock}\n                  value={props.isFilteredByStock}\n                />\n                Only show products in stock\n              </p>\n            </form>\n          </td>\n        </tr>\n      </thead>\n    </table>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst ProductCategoryRow = ({ productCategory }) => {\n  return (\n    <tr>\n      <th colSpan=\"2\">{productCategory}</th>\n    </tr>\n  );\n};\n\nexport default ProductCategoryRow;\n","import React from \"react\";\n\nconst ProductRow = props => {\n  const product = props.product;\n  const productName = product.stocked ? (\n    product.name\n  ) : (\n    <span style={{ color: \"red\" }}>{product.name} </span>\n  );\n\n  return (\n    <tr>\n      <td>{productName}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n};\n\nexport default ProductRow;\n","import React from \"react\";\nimport ProductCategoryRow from \"./ProductCategoryRow\";\nimport ProductRow from \"./ProductRow\";\n\nconst ProductTable = props => {\n  const rows = [];\n  let lastCategory = null;\n\n  props.products.forEach(product => {\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          key={product.category}\n          productCategory={product.category}\n        />\n      );\n    }\n    rows.push(<ProductRow key={product.name} product={product} />);\n    lastCategory = product.category;\n  });\n\n  return (\n    <table class=\"blueTable\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n};\n\nexport default ProductTable;\n","import React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport ProductTable from \"./ProductTable\";\n\nclass FilterableProductTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchField: \"\",\n      isFilteredByStock: false\n    };\n  }\n\n  filterByProductName = event => {\n    this.setState({\n      searchField: event.target.value\n    });\n  };\n\n  filterByStock = event => {\n    this.setState({\n      isFilteredByStock: event.target.checked\n    });\n  };\n\n  render() {\n    const { searchField, isFilteredByStock } = this.state;\n    const filteredProducts = this.props.products.filter(product => {\n      const filteredByName = product.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase());\n      return isFilteredByStock\n        ? product.stocked && filteredByName\n        : filteredByName;\n    });\n\n    return (\n      <div>\n        <SearchBar\n          searchField={this.state.searchField}\n          isFilteredByStock={this.state.isFilteredByStock}\n          filterByStock={this.filterByStock}\n          filterByProductName={this.filterByProductName}\n        />\n        <br />\n        <ProductTable products={filteredProducts} />\n      </div>\n    );\n  }\n}\n\nexport default FilterableProductTable;\n","import React from \"react\";\nimport \"./App.css\";\nimport FilterableProductTable from \"./components/FilterableProductTable\";\n\nfunction App() {\n  return <FilterableProductTable products={PRODUCTS} />;\n}\nconst PRODUCTS = [\n  {\n    category: \"Sporting Goods\",\n    price: \"$49.99\",\n    stocked: true,\n    name: \"Football\"\n  },\n  {\n    category: \"Sporting Goods\",\n    price: \"$9.99\",\n    stocked: true,\n    name: \"Baseball\"\n  },\n  {\n    category: \"Sporting Goods\",\n    price: \"$29.99\",\n    stocked: false,\n    name: \"Basketball\"\n  },\n  {\n    category: \"Electronics\",\n    price: \"$99.99\",\n    stocked: true,\n    name: \"iPod Touch\"\n  },\n  {\n    category: \"Electronics\",\n    price: \"$399.99\",\n    stocked: false,\n    name: \"iPhone 5\"\n  },\n  {\n    category: \"Electronics\",\n    price: \"$199.99\",\n    stocked: true,\n    name: \"Nexus 7\"\n  }\n];\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}